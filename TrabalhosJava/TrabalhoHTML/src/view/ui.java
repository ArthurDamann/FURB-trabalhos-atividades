/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package view;

import java.io.BufferedReader;
import java.io.File;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;

import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.filechooser.FileNameExtensionFilter;

import pilha.PilhaLista;

/**
 *
 * @author interno.empreendedor
 */
public class ui extends javax.swing.JFrame {

    private File arquivoAberto = null;

    /**
     * Creates new form ui
     */
    public ui() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */

    // <editor-fold defaultstate="collapsed" desc="Generated
    // <editor-fold defaultstate="collapsed" desc="Generated
    // <editor-fold defaultstate="collapsed" desc="Generated
    // <editor-fold defaultstate="collapsed" desc="Generated
    // Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel2 = new javax.swing.JLabel();
        jTextField1 = new javax.swing.JTextField();
        jButton1 = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jButton2 = new javax.swing.JButton();
        jScrollPane3 = new javax.swing.JScrollPane();
        jTextArea2 = new javax.swing.JTextArea();
        jButton3 = new javax.swing.JButton();
        jScrollPane4 = new javax.swing.JScrollPane();
        jEditorPane1 = new javax.swing.JEditorPane();
        jButton4 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setResizable(false);
        setSize(new java.awt.Dimension(1100, 600));

        jEditorPane1.setContentType("text/html");
        jEditorPane1.setText(
                "<html><body style='text-align: center;'><h1 style='background-color: rgb(247, 244, 244); margin: 1; font-size: 14px;'>Análise</h1></body></html>");

        jLabel2.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel2.setText("Arquivo:");

        jButton1.setFont(new java.awt.Font("Segoe UI", 3, 14)); // NOI18N
        jButton1.setText("Analisar");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
                new Object[][] {

                },
                new String[] {
                        "Tag", "Ocorrências"
                }));

        jScrollPane2.setViewportView(jTable1);

        jButton2.setFont(new java.awt.Font("Segoe UI", 3, 14)); // NOI18N
        jButton2.setText("Abrir");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jTextArea2.setColumns(20);
        jTextArea2.setRows(5);
        jScrollPane3.setViewportView(jTextArea2);

        jTextArea2.setBorder(new NumberedBorder());

        jButton3.setFont(new java.awt.Font("Segoe UI", 3, 14)); // NOI18N
        jButton3.setText("Salvar");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        jEditorPane1.setEditable(false);
        jScrollPane4.setViewportView(jEditorPane1);

        jButton4.setFont(new java.awt.Font("Segoe UI", 3, 14)); // NOI18N
        jButton4.setText("Clean");
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
                layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(layout.createSequentialGroup()
                                .addGap(28, 28, 28)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addGroup(layout.createSequentialGroup()
                                                .addGap(6, 6, 6)
                                                .addComponent(jLabel2)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                                .addComponent(jTextField1))
                                        .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 582,
                                                Short.MAX_VALUE)
                                        .addComponent(jScrollPane4, javax.swing.GroupLayout.DEFAULT_SIZE, 582,
                                                Short.MAX_VALUE))
                                .addGap(18, 18, 18)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 446,
                                                javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGroup(layout.createSequentialGroup()
                                                .addComponent(jButton2)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(jButton3)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(jButton1)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(jButton4)))
                                .addGap(26, 26, 26)));
        layout.setVerticalGroup(
                layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(layout.createSequentialGroup()
                                .addGap(16, 16, 16)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                        .addComponent(jLabel2)
                                        .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE,
                                                javax.swing.GroupLayout.DEFAULT_SIZE,
                                                javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(jButton1)
                                        .addComponent(jButton2)
                                        .addComponent(jButton3)
                                        .addComponent(jButton4))
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addGroup(layout.createSequentialGroup()
                                                .addGap(20, 20, 20)
                                                .addComponent(jScrollPane3))
                                        .addGroup(layout.createSequentialGroup()
                                                .addGap(18, 18, 18)
                                                .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 302,
                                                        javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addGap(18, 18, 18)
                                                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 186,
                                                        javax.swing.GroupLayout.PREFERRED_SIZE)))
                                .addContainerGap(33, Short.MAX_VALUE)));

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_jButton4ActionPerformed
        jTextArea2.setText("");
        jTextField1.setText("");
        jEditorPane1.setText(
                "<html><body style='text-align: center;'><h1 style='background-color: rgb(247, 244, 244); margin: 1; font-size: 14px;'>Análise</h1></body></html>");
        javax.swing.table.DefaultTableModel model = (javax.swing.table.DefaultTableModel) jTable1.getModel();
        model.setRowCount(0);
        arquivoAberto = null;
    }// GEN-LAST:event_jButton4ActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_jButton1ActionPerformed
        String texto = jTextArea2.getText();
        String[] linhas = texto.split("\n");
        PilhaLista<String> pilha = new PilhaLista<>();

        String[] nomesTags = new String[500];
        int[] contagensTags = new int[500];
        int totalTags = 0;

        String[] singletonTags = { "meta", "base", "br", "col", "command", "embed", "hr", "img", "input", "link",
                "param", "source", "!doctype" };

        boolean erro = false;
        StringBuilder mensagemDeErro = new StringBuilder();

        for (int i = 0; i < linhas.length; i++) {
            String linha = linhas[i].trim();
            if (linha.isEmpty())
                continue;

            int index = 0;
            while (index < linha.length()) {
                int inicio = linha.indexOf('<', index);
                if (inicio == -1)
                    break;
                int fim = linha.indexOf('>', inicio);
                if (fim == -1)
                    break;

                String tagCompleta = linha.substring(inicio + 1, fim).trim();
                boolean fechamento = false;
                if (tagCompleta.startsWith("/")) {
                    fechamento = true;
                    tagCompleta = tagCompleta.substring(1).trim();
                }

                String tagNome = tagCompleta.split("\\s+")[0].toLowerCase();

                boolean singletonFalseOuTrue = false;
                for (int s = 0; s < singletonTags.length; s++) {
                    if (singletonTags[s].equals(tagNome)) {
                        singletonFalseOuTrue = true;
                        break;
                    }
                }

                if (!fechamento) {

                    int pos = -1;
                    for (int t = 0; t < totalTags; t++) {
                        if (nomesTags[t].equalsIgnoreCase(tagNome)) {
                            pos = t;
                            break;
                        }
                    }
                    if (pos == -1) {
                        nomesTags[totalTags] = tagNome;
                        contagensTags[totalTags] = 1;
                        totalTags++;
                    } else {
                        contagensTags[pos]++;
                    }
                }

                if (!singletonFalseOuTrue) {
                    if (!fechamento) {
                        pilha.push(tagNome);
                    } else {
                        if (pilha.estaVazia()) {
                            erro = true;
                            mensagemDeErro.append("Linha ").append(i + 1).append(": Tag final inesperada </")
                                    .append(tagNome)
                                    .append(">\n");
                        } else {
                            String esperado = pilha.pop();
                            if (!esperado.equalsIgnoreCase(tagNome)) {
                                erro = true;
                                mensagemDeErro.append("Linha ").append(i + 1).append(": Tag final </").append(tagNome)
                                        .append("> encontrada, mas esperava </").append(esperado).append(">\n");
                            }
                        }
                    }
                }
                index = fim + 1;
            }
        }

        if (!pilha.estaVazia()) {
            erro = true;
            mensagemDeErro.append("Faltam tags finais: ");
            String faltando = "";
            while (!pilha.estaVazia()) {
                if (!faltando.isEmpty())
                    faltando += ", ";
                faltando += "</" + pilha.pop() + ">";
            }
            mensagemDeErro.append(faltando).append("\n");
        }

        if (erro) {

            String mensagemDeErroConvertida = mensagemDeErro.toString()
                    .replace("&", "&amp;")
                    .replace("<", "&lt;")
                    .replace(">", "&gt;")
                    .replace("\n", "<br>");

            String htmlErro = "<html>" +
                    "<body style='text-align: center;'>" +
                    "<h1 style='background-color: rgb(247, 244, 244); margin: 1; font-size: 14px;'>Análise</h1>" +
                    "<h2 style='color:red;'>Arquivo mal formatado</h2>" +
                    "<div style='text-align: left; display: inline-block;'>" +
                    "<pre style='color:red; font-family: monospace;'>" + mensagemDeErroConvertida + "</pre>" +
                    "</div>" +
                    "</body>" +
                    "</html>";

            jEditorPane1.setContentType("text/html");
            jEditorPane1.setText(htmlErro);

            javax.swing.table.DefaultTableModel model = (javax.swing.table.DefaultTableModel) jTable1.getModel();
            model.setRowCount(0);
        } else {
            String htmlOk = "<html>" +
                    "<body style='text-align: center;'>" +
                    "<h1 style='background-color: rgb(247, 244, 244); margin: 1; font-size: 14px;'>Análise</h1>" +
                    "<div style='color:green;'>" +
                    "<h2>Arquivo bem formatado!</h2>" +
                    "</div>" +
                    "</body>" +
                    "</html>";

            jEditorPane1.setContentType("text/html");
            jEditorPane1.setText(htmlOk);
            javax.swing.table.DefaultTableModel model = (javax.swing.table.DefaultTableModel) jTable1.getModel();
            model.setRowCount(0);
            for (int i = 0; i < totalTags; i++) {
                model.addRow(new Object[] { nomesTags[i], contagensTags[i] });
            }
        }
    }// GEN-LAST:event_jButton1ActionPerformed

    // abrir
    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_jButton2ActionPerformed
        String caminho = jTextField1.getText().trim();
        File arquivo;

        if (caminho.isEmpty()) {
            JFileChooser fileChooser = new JFileChooser();
            FileNameExtensionFilter filtro = new FileNameExtensionFilter("Arquivos HTML (*.html, *.htm)", "html",
                    "htm");
            fileChooser.setFileFilter(filtro);

            int resultado = fileChooser.showOpenDialog(this);

            if (resultado == JFileChooser.APPROVE_OPTION) {
                arquivo = fileChooser.getSelectedFile();
                jTextField1.setText(arquivo.getAbsolutePath());
            } else {
                return;
            }
        } else {
            arquivo = new File(caminho);
            if (!arquivo.exists() || !arquivo.isFile()) {
                JOptionPane.showMessageDialog(this, "Arquivo não encontrado ou caminho inválido.");
                return;
            }
        }

        try (BufferedReader leitor = new BufferedReader(new FileReader(arquivo))) {
            jTextArea2.read(leitor, null);
            arquivoAberto = arquivo; // armazena o arquivo aberto
        } catch (IOException ex) {
            JOptionPane.showMessageDialog(this, "Erro ao abrir o arquivo: " + ex.getMessage());
        }
    }// GEN-LAST:event_jButton2ActionPerformed

    // salvar
    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_jButton3ActionPerformed
        if (arquivoAberto != null) {
            // salva diretamente no arquivo aberto
            try (FileWriter writer = new FileWriter(arquivoAberto)) {
                writer.write(jTextArea2.getText());
                JOptionPane.showMessageDialog(this, "Arquivo salvo com sucesso em: " + arquivoAberto.getAbsolutePath());
            } catch (IOException ex) {
                JOptionPane.showMessageDialog(this, "Erro ao salvar o arquivo: " + ex.getMessage());
            }
        } else {
            // se nao houver arquivo aberto, abre o JFileChooser
            JFileChooser fileChooser = new JFileChooser();
            fileChooser.setDialogTitle("Salvar Arquivo");

            int userSelection = fileChooser.showSaveDialog(this);

            if (userSelection == JFileChooser.APPROVE_OPTION) {
                File fileToSave = fileChooser.getSelectedFile();

                if (!fileToSave.getName().toLowerCase().endsWith(".html")) {
                    fileToSave = new File(fileToSave.getAbsolutePath() + ".html");
                }

                try (FileWriter writer = new FileWriter(fileToSave)) {
                    writer.write(jTextArea2.getText());
                    arquivoAberto = fileToSave; // atualiza o arquivo aberto
                } catch (IOException ex) {
                    JOptionPane.showMessageDialog(this, "Erro ao salvar o arquivo: " + ex.getMessage());
                }
            }
        }
    }// GEN-LAST:event_jButton3ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        // <editor-fold defaultstate="collapsed" desc=" Look and feel setting code
        // (optional) ">
        /*
         * If Nimbus (introduced in Java SE 6) is not available, stay with the default
         * look and feel.
         * For details see
         * http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ui.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ui.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ui.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ui.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        // </editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new ui().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JEditorPane jEditorPane1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JTable jTable1;
    private javax.swing.JTextArea jTextArea2;
    private javax.swing.JTextField jTextField1;
    // End of variables declaration//GEN-END:variables
}
